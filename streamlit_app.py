"""Interface Streamlit pour la validation et le feedback des classifications documentaires.

Cette application permet de visualiser une liste de documents, filtrer par cat√©gorie/confidence,
valider manuellement les pr√©dictions et exporter les d√©cisions au format CSV.
"""
from __future__ import annotations

import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List

import pandas as pd
import streamlit as st

DATA_PATH = Path(__file__).parent / "data" / "sample_documents.json"
EXPORT_FILENAME = "validation_decisions.csv"
SECURITY_REMINDERS = [
    "Lancer l'application uniquement sur une machine de confiance prot√©g√©e par FileVault.",
    "D√©sactiver toute synchronisation cloud automatique sur le dossier surveill√©.",
    "Supprimer les exports lorsque la session de validation est termin√©e.",
    "D√©connecter les p√©riph√©riques externes non chiffr√©s avant de manipuler les documents sensibles.",
]


@st.cache_data(show_spinner=False)
def load_documents(path: Path = DATA_PATH) -> pd.DataFrame:
    """Charge les m√©tadonn√©es documents depuis un fichier JSON local."""
    if not path.exists():
        raise FileNotFoundError(
            "Le fichier de m√©tadonn√©es est introuvable. V√©rifiez la configuration locale."
        )

    with path.open("r", encoding="utf-8") as stream:
        records: List[Dict] = json.load(stream)

    df = pd.DataFrame(records)
    if "ingested_at" in df.columns:
        df["ingested_at"] = pd.to_datetime(df["ingested_at"], errors="coerce")

    return df


def filter_documents(
    documents: pd.DataFrame,
    categories: List[str],
    confidence_range: tuple[float, float],
    search_query: str,
) -> pd.DataFrame:
    """Applique les filtres utilisateur sur le tableau des documents."""
    filtered = documents.copy()

    if categories:
        filtered = filtered[filtered["predicted_category"].isin(categories)]

    min_conf, max_conf = confidence_range
    filtered = filtered[
        filtered["prediction_confidence"].between(min_conf, max_conf, inclusive="both")
    ]

    if search_query:
        query = search_query.lower()
        filtered = filtered[
            filtered.apply(
                lambda row: query in row.get("file_name", "").lower()
                or query in str(row.get("ocr_excerpt", "")).lower()
                or query in row.get("document_id", "").lower(),
                axis=1,
            )
        ]

    return filtered.sort_values(by="ingested_at", ascending=False)


def initialise_session_state():
    """Pr√©pare l'espace de stockage des d√©cisions dans la session Streamlit."""
    if "decisions" not in st.session_state:
        st.session_state["decisions"] = {}


def register_decision(document_id: str, payload: Dict[str, str]) -> None:
    """Enregistre ou met √† jour la d√©cision pour un document donn√©."""
    initialise_session_state()
    st.session_state.decisions[document_id] = payload


def decisions_dataframe() -> pd.DataFrame:
    """Retourne les d√©cisions sous forme de DataFrame pour l'affichage/export."""
    initialise_session_state()
    if not st.session_state.decisions:
        return pd.DataFrame()

    df = pd.DataFrame.from_records(
        [
            {
                "document_id": doc_id,
                **decision,
            }
            for doc_id, decision in st.session_state.decisions.items()
        ]
    )
    df["validated_at"] = pd.to_datetime(df["validated_at"], errors="coerce")
    return df.sort_values(by="validated_at", ascending=False)


def render_sidebar(documents: pd.DataFrame) -> dict:
    """Construit la barre lat√©rale contenant les filtres et rappels s√©curit√©."""
    st.sidebar.header("Filtres de tri")
    available_categories = sorted(documents["predicted_category"].unique())
    selected_categories = st.sidebar.multiselect(
        "Cat√©gories sugg√©r√©es",
        options=available_categories,
        default=available_categories,
    )

    min_conf = float(documents["prediction_confidence"].min())
    max_conf = float(documents["prediction_confidence"].max())
    confidence_range = st.sidebar.slider(
        "Seuil de confiance",
        min_value=0.0,
        max_value=1.0,
        value=(min_conf, max_conf),
        step=0.01,
    )

    search_query = st.sidebar.text_input(
        "Recherche plein texte",
        placeholder="ID document, nom de fichier, extrait OCR...",
    )

    st.sidebar.divider()
    st.sidebar.subheader("Bonnes pratiques s√©curit√©")
    for reminder in SECURITY_REMINDERS:
        st.sidebar.write(f"- {reminder}")

    return {
        "categories": selected_categories,
        "confidence_range": confidence_range,
        "search_query": search_query,
    }


def render_document_overview(documents: pd.DataFrame) -> None:
    st.subheader("Aper√ßu des documents entrants")
    if documents.empty:
        st.info(
            "Aucun document ne correspond aux filtres. Ajustez vos crit√®res pour reprendre la validation."
        )
        return

    display_df = documents[
        [
            "document_id",
            "file_name",
            "ingested_at",
            "predicted_category",
            "prediction_confidence",
            "supplier",
            "amount",
            "currency",
        ]
    ].copy()
    display_df["prediction_confidence"] = (
        display_df["prediction_confidence"] * 100
    ).map("{:.0f}%".format)
    st.dataframe(
        display_df,
        use_container_width=True,
        hide_index=True,
    )


def render_validation_panel(documents: pd.DataFrame) -> None:
    st.subheader("Validation manuelle & feedback")
    if documents.empty:
        st.caption(
            "Aucun document s√©lectionnable tant que le filtre ne retourne pas de r√©sultats."
        )
        return

    document_ids = documents["document_id"].tolist()
    selected_id = st.selectbox(
        "Choisissez un document √† valider",
        options=document_ids,
    )
    selected_doc = documents.set_index("document_id").loc[selected_id]

    st.markdown(
        f"**Fichier :** `{selected_doc.file_name}`  \
**Chemin source :** `{selected_doc.source_path}`"
    )
    st.markdown(
        f"**Cat√©gorie sugg√©r√©e :** {selected_doc.predicted_category} (confiance {selected_doc.prediction_confidence:.0%})"
    )
    st.markdown(f"**Fournisseur / √©metteur :** {selected_doc.get('supplier', 'N/A')}")
    st.markdown(f"**Montant d√©tect√© :** {selected_doc.get('amount', 'N/A')} {selected_doc.get('currency', '')}")
    st.markdown("**Extrait OCR :**")
    st.info(selected_doc.get("ocr_excerpt", "Aucun extrait disponible."))

    with st.expander("Notes de s√©curit√© associ√©es"):
        st.write(selected_doc.get("security_notes", "Non renseign√©."))

    st.divider()
    st.markdown("### D√©cision")
    available_categories = sorted(documents["predicted_category"].unique())
    final_category = st.selectbox(
        "Cat√©gorie finale",
        options=available_categories,
        index=available_categories.index(selected_doc.predicted_category)
        if selected_doc.predicted_category in available_categories
        else 0,
    )
    validation_status = st.radio(
        "Statut de validation",
        options=["Valid√©", "√Ä revoir", "Rejet√©"],
        index=0,
        help="""Utilisez *√Ä revoir* si une v√©rification suppl√©mentaire est n√©cessaire,
        et *Rejet√©* si le document doit √™tre exclu du jeu d'entra√Ænement.""",
    )
    reviewer_comment = st.text_area(
        "Commentaires / corrections",
        placeholder="Pr√©cisez les √©l√©ments √† corriger ou les champs manquants...",
    )

    if st.button("Enregistrer la d√©cision", type="primary"):
        register_decision(
            selected_id,
            {
                "file_name": selected_doc.file_name,
                "predicted_category": selected_doc.predicted_category,
                "final_category": final_category,
                "validation_status": validation_status,
                "reviewer_comment": reviewer_comment,
                "validated_at": datetime.now().isoformat(timespec="seconds"),
            },
        )
        st.success("D√©cision enregistr√©e pour le document s√©lectionn√©.")


def render_decision_exports() -> None:
    st.subheader("Historique des validations")
    decisions_df = decisions_dataframe()
    if decisions_df.empty:
        st.caption("Aucune validation enregistr√©e pour le moment.")
        return

    st.dataframe(decisions_df, use_container_width=True, hide_index=True)

    csv_content = decisions_df.to_csv(index=False).encode("utf-8")
    st.download_button(
        "Exporter les d√©cisions (CSV)",
        data=csv_content,
        file_name=EXPORT_FILENAME,
        mime="text/csv",
    )
    st.caption(
        "Stockez le fichier sur un volume chiffr√© et supprimez-le une fois l'import r√©alis√© dans vos outils internes."
    )


def main():
    st.set_page_config(
        page_title="Validation documentaire locale",
        layout="wide",
        page_icon="üìÅ",
    )
    st.title("Interface de validation documentaire (POC)")
    st.caption(
        "Prototype local pour v√©rifier la pertinence des classifications automatiques tout en restant hors ligne."
    )

    initialise_session_state()

    try:
        documents = load_documents()
    except FileNotFoundError as error:
        st.error(str(error))
        st.stop()

    filters = render_sidebar(documents)
    filtered_docs = filter_documents(
        documents,
        categories=filters["categories"],
        confidence_range=filters["confidence_range"],
        search_query=filters["search_query"],
    )

    render_document_overview(filtered_docs)
    render_validation_panel(filtered_docs)
    render_decision_exports()

    st.divider()
    st.markdown("#### Rappels d'usage")
    st.write(
        "- Conservez l'application et les donn√©es sur le m√™me volume chiffr√©.\n"
        "- Planifiez un point de revue hebdomadaire avec l'√©quipe OCR/ML pour partager les feedbacks consolid√©s.\n"
        "- Archivez les d√©cisions valid√©es dans un coffre-fort num√©rique interne (KeePassXC, coffre chiffr√©, etc.)."
    )


if __name__ == "__main__":
    main()
